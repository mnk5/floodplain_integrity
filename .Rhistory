IFI$StrmOrder <- as.factor(IFI$StrmOrder)
# Join Wetland abundance and IFI based on HUC12
wetlands.comp <- merge(wetlands, IFI, by = "HUC12")
# fit linear model
wetlands.lm <- lm(data = wetlands.comp, Overall ~ Area_Density)
R2.wetlands <- summary(wetlands.lm)$r.squared
wetlands.lm.order <- by(wetlands.comp, wetlands.comp$StrmOrder,
function(x) lm(data = x, Overall ~ Area_Density))
R2.wetlands.order <- lapply(wetlands.lm.order, function(x) summary(x)$r.squared)
View(R2.wetlands.order)
View(R2.wetlands.order)
# Scatter plot of wetlands vs IFI by stream order
wetlands.plot.SO <- ggplot(na.omit(wetlands.comp), aes(x = Area_Density, y = Overall)) +
geom_point() +
xlim(0,1) + ylim(0,1) +
coord_equal() +
xlab("Density of Wetlands") +
ylab("Overall Index of Floodplain Integrity") +
facet_wrap(~StrmOrder) +
# geom_text(x= 0.9, y=0.1, label = paste0("R^2 = ", round(R2.wetlands,2))) +
theme_bw() +
theme(text = element_text(size=16))
wetlands.plot.SO
# Scatter plot of wetlands vs IFI by stream order
wetlands.plot.SO <- ggplot(na.omit(wetlands.comp), aes(x = Area_Density, y = Overall)) +
geom_point() +
xlim(0,1) + ylim(0,1) +
coord_equal() +
xlab("Density of Wetlands") +
ylab("Overall Index of Floodplain Integrity") +
facet_wrap(~StrmOrder) +
# geom_text(x= 0.9, y=0.1, label = paste0("R^2 = ", round(R2.wetlands,2))) +
theme_bw() +
theme(text = element_text(size=14))
wetlands.plot.SO
# Linear relationship between IFI as function of Area
area.lm <- lm(all.data$IFI_geomean ~ log10(all.data$FP_Areakm2))
R2 <- summary(area.lm)$r.squared
a6 <- ggplot(all.data, aes(x = FP_Areakm2, y = IFI_geomean)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Overall IFI") +
theme_bw() +
theme(text = element_text(size=20))
a6
#######################################
# Plot by floodplain area
a1 <- ggplot(all.data, aes(x = FP_Areakm2, y = Floods)) +
geom_point() +
scale_x_continuous() +
scale_y_continuous() +
xlab("") +
ylab("Floods IFI")
a2 <- ggplot(all.data, aes(x = FP_Areakm2, y = Groundwate)) +
geom_point() +
scale_x_continuous() +
scale_y_continuous() +
xlab("") +
ylab("Groundwater IFI")
a3 <- ggplot(all.data, aes(x = FP_Areakm2, y = Sediment)) +
geom_point() +
scale_x_continuous() +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Sediment IFI")
a4 <- ggplot(all.data, aes(x = FP_Areakm2, y = Organics_S)) +
geom_point() +
scale_x_continuous() +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Organics and Solutes IFI")
a5 <- ggplot(all.data, aes(x = FP_Areakm2, y = Habitat)) +
geom_point() +
scale_x_continuous() +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Habitat IFI")
grid.arrange(a1, a2, a5, a4, a3, nrow = 2)
#######################################
# Plot by floodplain area
a1 <- ggplot(all.data, aes(x = FP_Areakm2, y = Floods)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab("") +
ylab("Floods IFI")
a2 <- ggplot(all.data, aes(x = FP_Areakm2, y = Groundwate)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab("") +
ylab("Groundwater IFI")
a3 <- ggplot(all.data, aes(x = FP_Areakm2, y = Sediment)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Sediment IFI")
a4 <- ggplot(all.data, aes(x = FP_Areakm2, y = Organics_S)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Organics and Solutes IFI")
a5 <- ggplot(all.data, aes(x = FP_Areakm2, y = Habitat)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Habitat IFI")
grid.arrange(a1, a2, a5, a4, a3, nrow = 2)
#######################################
# Plot by floodplain area
a1 <- ggplot(all.data, aes(x = FP_Areakm2, y = Floods)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab("") +
ylab("Floods IFI") +
theme_bw()
grid.arrange(a1, a2, a5, a4, a3, nrow = 2)
a2 <- ggplot(all.data, aes(x = FP_Areakm2, y = Groundwate)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab("") +
ylab("Groundwater IFI") +
theme_bw()
a3 <- ggplot(all.data, aes(x = FP_Areakm2, y = Sediment)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Sediment IFI") +
theme_bw()
a4 <- ggplot(all.data, aes(x = FP_Areakm2, y = Organics_S)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Organics and Solutes IFI") +
theme_bw()
a5 <- ggplot(all.data, aes(x = FP_Areakm2, y = Habitat)) +
geom_point() +
scale_x_log10(labels = trans_format('log10',math_format(10^.x))) +
scale_y_continuous() +
xlab(bquote("Floodplain unit area," ~km^2)) +
ylab("Habitat IFI") +
theme_bw()
grid.arrange(a1, a2, a5, a4, a3, nrow = 2)
library(ggplot2)
library(RColorBrewer)
library(wesanderson)
library(tidyr)
library(grid)
library(gridExtra)
library(emmeans)
library(scales)
library(dplyr)
library(data.table)
library(stringr)
library(psych)
library(ggpubr)
# set path to Git folder
basepath <- "C:/Users/mnk5/Documents/floodplain_integrity"
out.path <- paste(basepath, "/Outputs/", sep="") # for saving outputss
# Load csv file of stressor data with Ecoregion and city as exported from GIS
data.path <- paste(basepath, "/RawData/IFI_Ecoregion_cities.csv", sep="")
all.data <- read.csv(data.path)
colnames(all.data)[which(names(all.data) == "IFI_geomea")] <- "IFI_geomean"
col.names <- colnames(all.data)
# find columns to plot
functions <- c("Floods", "Groundwate", "Sediment", "Organics_S", "Habitat")
func.IFI <- all.data[, functions]
colnames(func.IFI) <- c("Floods", "Groundwater", "Sediment", "Organics_Solutes", "Habitat")
# colnames(func.IFI)[which(names(func.IFI) == "IFI_geomean")] <- "Overall IFI"
all.data$In_City <- as.factor(all.data$In_City)
# get counts for label
count.data.city <- as.data.frame((table(all.data$In_City)))
names(count.data.city)[1] = 'In_City'
count.data.city$Freq <- paste(" N =", as.character(count.data.city$Freq), sep = " ")
# T test for difference
t.test(IFI_geomean ~ In_City, data = all.data)
# result: means are not equal
City.plot <- ggplot(all.data, aes(In_City, IFI_geomean)) +
geom_boxplot(aes(In_City, IFI_geomean)) +
scale_x_discrete(name = "", labels = c("Rural", "Urban")) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.city, aes(In_City, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "b)")
City.plot
# Summary statistics
all.data %>% group_by(In_City) %>% summarize(mean = mean(IFI_geomean), med = median(IFI_geomean))
# Summary statistics, physioregion
all.data %>% group_by(PhysioReg) %>% summarize(mean = mean(IFI_geomean), med = median(IFI_geomean))
phys.lm <- lm(IFI_geomean ~ PhysioReg, data = all.data)
phys.pairwise <- lsmeans(phys.lm, pairwise ~ PhysioReg)
method.contrasts <- phys.pairwise$contrasts
method.contrasts
Phys_comparisons <- list(c("Intermontane Plateaus", "Rocky Mountain System"),
c("Rocky Mountain System", "Interior Plains"),
c("Intermontane Plateaus", "Interior Plains"))
#Plot boxplots
PHYS <- ggplot(all.data, aes(PhysioReg, IFI_geomean)) +
geom_boxplot(aes(PhysioReg, IFI_geomean)) +
scale_x_discrete(name = NULL, labels = function(x) str_wrap(x, width = 20)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.phys, aes(PhysioReg, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "a)") +
stat_compare_means(comparisons = Phys_comparisons, label = "p.signif",
label.y = c(1.2, 1.3, 1.4))
PHYS
# get counts for label
count.data.phys <- as.data.frame((table(all.data$PhysioReg)))
names(count.data.phys)[1] = 'PhysioReg'
count.data.phys$Freq <- paste(" N =", as.character(count.data.phys$Freq), sep = " ")
# Test for differences
phys.lm <- lm(IFI_geomean ~ PhysioReg, data = all.data)
phys.pairwise <- lsmeans(phys.lm, pairwise ~ PhysioReg)
method.contrasts <- phys.pairwise$contrasts
method.contrasts
Phys_comparisons <- list(c("Intermontane Plateaus", "Rocky Mountain System"),
c("Rocky Mountain System", "Interior Plains"),
c("Intermontane Plateaus", "Interior Plains"))
#Plot boxplots
PHYS <- ggplot(all.data, aes(PhysioReg, IFI_geomean)) +
geom_boxplot(aes(PhysioReg, IFI_geomean)) +
scale_x_discrete(name = NULL, labels = function(x) str_wrap(x, width = 20)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.phys, aes(PhysioReg, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "a)") +
stat_compare_means(comparisons = Phys_comparisons, label = "p.signif",
label.y = c(1.2, 1.3, 1.4))
PHYS
city_comparisons <- list(c("0", "1"))
city_comparisons <- list(c("0", "1"))
City.plot <- ggplot(all.data, aes(In_City, IFI_geomean)) +
geom_boxplot(aes(In_City, IFI_geomean)) +
scale_x_discrete(name = "", labels = c("Rural", "Urban")) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.city, aes(In_City, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "b)") +
stat_compare_means(comparisons = city_comparisons, label = "p.signif",
label.y = c(1.2))
City.plot
all.data[all.data == -999] <- NA
count.data <- as.data.frame((table(all.data$StrmOrder)))
names(count.data)[1] = 'StrmOrder'
count.data$Freq <- paste(" N =", as.character(count.data$Freq), sep = " ")
SO_comparisons <- list( c("1","2"), c("2","3"), c("3", "4"), c("4","5"), c("5","6"), c("6", "7"))
SO <- ggplot(na.omit(all.data), aes(StrmOrder, IFI_geomean, group = StrmOrder)) +
geom_boxplot(na.rm = TRUE) +
scale_x_discrete(name = "Stream Order", breaks = seq(1:8)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
geom_text(data = count.data, aes(StrmOrder, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "c)") +
stat_compare_means(comparisons = SO_comparisons, label = "p.signif", method = "t.test",
label.y = seq(1.2, 1.4, 0.2/length(SO_comparisons)))
SO
# divide grid arrange by 5
Figure <- grid.arrange(PHYS, City.plot, SO,
layout_matrix = rbind(c(1,1,1,2,2), c(3,3,3,3,3)))
#Plot boxplots
PHYS <- ggplot(all.data, aes(PhysioReg, IFI_geomean)) +
geom_boxplot(aes(PhysioReg, IFI_geomean)) +
scale_x_discrete(name = NULL, labels = function(x) str_wrap(x, width = 20)) +
scale_y_continuous(limits = c(0,1.5)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.phys, aes(PhysioReg, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "a)") +
stat_compare_means(comparisons = Phys_comparisons, label = "p.signif",
label.y = c(1.2, 1.3, 1.4))
PHYS
g
# divide grid arrange by 5
Figure <- grid.arrange(PHYS, City.plot, SO,
layout_matrix = rbind(c(1,1,1,2,2), c(3,3,3,3,3)))
City.plot <- ggplot(all.data, aes(In_City, IFI_geomean)) +
geom_boxplot(aes(In_City, IFI_geomean)) +
scale_x_discrete(name = "", labels = c("Rural", "Urban")) +
scale_y_continuous(limits = c(0,1.5)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.city, aes(In_City, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "b)") +
stat_compare_means(comparisons = city_comparisons, label = "p.signif",
label.y = c(1.2))
SO <- ggplot(na.omit(all.data), aes(StrmOrder, IFI_geomean, group = StrmOrder)) +
geom_boxplot(na.rm = TRUE) +
scale_x_discrete(name = "Stream Order", breaks = seq(1:8)) +
scale_y_continuous(limits = c(0,1.5)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
geom_text(data = count.data, aes(StrmOrder, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "c)") +
stat_compare_means(comparisons = SO_comparisons, label = "p.signif", method = "t.test",
label.y = seq(1.2, 1.4, 0.2/length(SO_comparisons)))
# divide grid arrange by 5
Figure <- grid.arrange(PHYS, City.plot, SO,
layout_matrix = rbind(c(1,1,1,2,2), c(3,3,3,3,3)))
# Convert to factor and re-order to match geography
all.data$PhysioReg <- factor(all.data$PhysioReg,
levels = c("Intermontane Plateaus", "Rocky Mountain System", "Interior Plains"),
ordered = TRUE)
# get counts for label
count.data.phys <- as.data.frame((table(all.data$PhysioReg)))
names(count.data.phys)[1] = 'PhysioReg'
count.data.phys$Freq <- paste(" N =", as.character(count.data.phys$Freq), sep = " ")
# Test for differences
phys.lm <- lm(IFI_geomean ~ PhysioReg, data = all.data)
phys.pairwise <- lsmeans(phys.lm, pairwise ~ PhysioReg)
method.contrasts <- phys.pairwise$contrasts
method.contrasts
Phys_comparisons <- list(c("Intermontane Plateaus", "Rocky Mountain System"),
c("Rocky Mountain System", "Interior Plains"),
c("Intermontane Plateaus", "Interior Plains"))
#Plot boxplots
PHYS <- ggplot(all.data, aes(PhysioReg, IFI_geomean)) +
geom_boxplot(aes(PhysioReg, IFI_geomean)) +
scale_x_discrete(name = NULL, labels = function(x) str_wrap(x, width = 20)) +
scale_y_continuous(limits = c(0,1.5)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.phys, aes(PhysioReg, y = 1.0, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "a)") +
stat_compare_means(comparisons = Phys_comparisons, label = "p.signif",
label.y = c(1.2, 1.3, 1.4))
PHYS
# divide grid arrange by 5
Figure <- grid.arrange(PHYS, City.plot, SO,
layout_matrix = rbind(c(1,1,1,2,2), c(3,3,3,3,3)))
SO <- ggplot(na.omit(all.data), aes(StrmOrder, IFI_geomean, group = StrmOrder)) +
geom_boxplot(na.rm = TRUE) +
scale_x_discrete(name = "Stream Order", breaks = seq(1:8)) +
scale_y_continuous(limits = c(0,1.5)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
geom_text(data = count.data, aes(StrmOrder, y = 1.05, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "c)") +
stat_compare_means(comparisons = SO_comparisons, label = "p.signif", method = "t.test",
label.y = seq(1.25, 1.45, 0.2/length(SO_comparisons)))
City.plot <- ggplot(all.data, aes(In_City, IFI_geomean)) +
geom_boxplot(aes(In_City, IFI_geomean)) +
scale_x_discrete(name = "", labels = c("Rural", "Urban")) +
scale_y_continuous(limits = c(0,1.5)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.city, aes(In_City, y = 1.05, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "b)") +
stat_compare_means(comparisons = city_comparisons, label = "p.signif",
label.y = c(1.25))
#Plot boxplots
PHYS <- ggplot(all.data, aes(PhysioReg, IFI_geomean)) +
geom_boxplot(aes(PhysioReg, IFI_geomean)) +
scale_x_discrete(name = NULL, labels = function(x) str_wrap(x, width = 20)) +
scale_y_continuous(limits = c(0,1.5)) +
ylab("Overall IFI") +
theme_linedraw() +
theme(text = element_text(size=16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), legend.position = "none") +
geom_text(data = count.data.phys, aes(PhysioReg, y = 1.05, label = Freq), nudge_y = 0.05, size = 4) +
labs(tag = "a)") +
stat_compare_means(comparisons = Phys_comparisons, label = "p.signif",
label.y = c(1.25, 1.35, 1.45))
# divide grid arrange by 5
Figure <- grid.arrange(PHYS, City.plot, SO,
layout_matrix = rbind(c(1,1,1,2,2), c(3,3,3,3,3)))
# Test for significant difference
all.data$StrmOrder <- as.factor(all.data$StrmOrder)
SO.lm <- lm(IFI_geomean ~ StrmOrder, data = all.data)
SO.pairwise <- lsmeans(SO.lm, pairwise ~ StrmOrder)
method.contrasts <- SO.pairwise$contrasts
method.contrasts
compare_means(comparisons = SO_comparisons, label = "p.signif", method = "t.test")
compare_means(data = all.data, comparisons = SO_comparisons, label = "p.signif", method = "t.test")
compare_means(data = all.data, formula = IFI_geomean ~ StrmOrder, comparisons = SO_comparisons, label = "p.signif", method = "t.test")
...
compare_means(data = all.data, formula = IFI_geomean ~ InCity, comparisons = city_comparisons, label = "p.signif", method = "t.test")
compare_means(data = all.data, formula = IFI_geomean ~ In_City, comparisons = city_comparisons, label = "p.signif", method = "t.test")
library(ggplot2)
library(RColorBrewer)
library(wesanderson)
library(rgeos)
library(rgdal)
library(dplyr)
library(tidyr)
library(broom)
library(gridExtra)
library(reshape2)
library(ggmap)
# Set working directory
setwd("C:/Users/mnk5/Documents/floodplain_integrity")
# read in files
floodplain <- readOGR(dsn = "RawData/SpatialData", layer = "CO_FP_IFI")
CO.boundary <- readOGR(dsn = "RawData/SpatialData", layer = "CO_StateBoundary_UTM")
CO.HUC12 <- readOGR(dsn = "RawData/SpatialData", layer = "CO_HUC12_IFI")
# NHD v1 segments order 4 and larger in Colorado
CO.rivers <- readOGR(dsn = "RawData/SpatialData", layer = "NHDv1_Order4_CO")
# Clean data
floodplain$HUC12 <- as.character(floodplain$HUC12)
CO.HUC12$HUC12 <- as.character(CO.HUC12$HUC12)
# transform for ggplot
floodplain_tidy <- tidy(floodplain, region = "HUC12")
floodplain.df <- left_join(floodplain_tidy, floodplain@data, by = c("id" = "HUC12"))
HUC12_tidy <- tidy(CO.HUC12, region = "HUC12")
HUC12.df <- left_join(HUC12_tidy, CO.HUC12@data, by = c("id" = "HUC12"))
CO.boundary@data$id <- row.names(CO.boundary@data)
CO.boundary_tidy <- tidy(CO.boundary, region = 'id')
CO.rivers@data$id <- row.names(CO.rivers@data)
CO.rivers_tidy <- tidy(CO.rivers, region = 'id')
###############################
# Plot results
# choose bounding box area for zoomed in area
zoomsize <- 46000
xlimits <- c(494000,494000 + zoomsize)
ylimits <- c(4506000, 4506000 - zoomsize)
map1 <- ggplot(data = floodplain.df, aes(x = long, y = lat, group = group, fill = IFI_geomea)) +
geom_polygon(data = CO.boundary_tidy, aes(x = long, y = lat, group = group), fill = "grey93") +
geom_polygon(data = floodplain.df, aes(x = long, y = lat, group = group, fill = IFI_geomea)) +
# coord_equal() +
coord_fixed(ratio = 1, xlim = xlimits, ylim = ylimits) +
scale_fill_gradientn(colours = c("chocolate3", "wheat1" ,"darkcyan"), breaks = seq(0, 1, by = 0.2))
map1 <- map1 + labs(x = NULL, y = NULL, fill = "IFI")
map1 <- map1 + theme_minimal(base_size = 14) +
labs(x = NULL, y = NULL, fill = "IFI") +
theme(panel.background = element_rect(fill = "grey93"),
panel.border = element_rect(fill = NA, colour = "black"),
legend.position = "bottom",
legend.text = element_text(size = 12),
legend.key.width = unit(1, "cm"),
axis.text=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
map1
map1 <- ggplot(data = floodplain.df, aes(x = long, y = lat, group = group, fill = IFI_geomea)) +
geom_polygon(data = CO.boundary_tidy, aes(x = long, y = lat, group = group), fill = "grey93") +
geom_polygon(data = floodplain.df, aes(x = long, y = lat, group = group, fill = IFI_geomea)) +
# coord_equal() +
coord_fixed(ratio = 1, xlim = xlimits, ylim = ylimits) +
scale_fill_gradientn(colours = c("chocolate3", "wheat1" ,"darkcyan"), breaks = seq(0, 1, by = 0.2))
map1 <- map1 + labs(x = NULL, y = NULL, fill = "IFI")
map1 <- map1 + theme_minimal(base_size = 14) +
labs(x = NULL, y = NULL, fill = "Floodplain Integrity") +
theme(panel.background = element_rect(fill = "grey93"),
panel.border = element_rect(fill = NA, colour = "black"),
legend.position = "bottom",
legend.text = element_text(size = 12),
legend.key.width = unit(1, "cm"),
axis.text=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
map1
map1 <- ggplot(data = floodplain.df, aes(x = long, y = lat, group = group, fill = IFI_geomea)) +
geom_polygon(data = CO.boundary_tidy, aes(x = long, y = lat, group = group), fill = "grey93") +
geom_polygon(data = floodplain.df, aes(x = long, y = lat, group = group, fill = IFI_geomea)) +
# coord_equal() +
coord_fixed(ratio = 1, xlim = xlimits, ylim = ylimits) +
scale_fill_gradientn(colours = c("chocolate3", "wheat1" ,"darkcyan"), breaks = seq(0, 1, by = 0.2))
map1 <- map1 + labs(x = NULL, y = NULL, fill = "IFI")
map1 <- map1 + theme_minimal(base_size = 14) +
labs(x = NULL, y = NULL, fill = "Floodplain\nIntegrity") +
theme(panel.background = element_rect(fill = "grey93"),
panel.border = element_rect(fill = NA, colour = "black"),
legend.position = "bottom",
legend.text = element_text(size = 12),
legend.key.width = unit(1, "cm"),
axis.text=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
map1
source('C:/Users/mnk5/Documents/floodplain_integrity/IndexAnalysis.R', echo=TRUE)
ggsave("Histograms.pdf", plot = area.barplot,
path = "C:/Users/mnk5/Documents/floodplain_integrity/Outputs/",
width = 6.5, height = 4, units = "in", dpi = 1000)
ggsave("Boxplots.pdf", plot = Figure,
path = "C:/Users/mnk5/Documents/floodplain_integrity/Outputs/",
width = 6.5, height = 4.95, units = "in", dpi = 1000)
ggsave("IFI_validation.pdf", plot = Comp.graph,
path = "C:/Users/mnk5/Documents/floodplain_integrity/Outputs/",
width = 6.5, height = 3.15, units = "in", dpi = 1000)
ggsave("Ratio_plot.pdf", plot = ratio.plot,
path = "C:/Users/mnk5/Documents/floodplain_integrity/Outputs/",
width = 6.5, height = 4.35, units = "in", dpi = 1000)
source('C:/Users/mnk5/Documents/floodplain_integrity/ResultsMapping.R', echo=TRUE)
source('C:/Users/mnk5/Documents/floodplain_integrity/IndexSensitivity.R', echo=TRUE)
